# Andriy Zhugayevych  azh@ukr.net
# LatticeTools package
# created 25.05.2004  modified - see version below
# https://zhugayevych.me/maple/LatticeTools/
#
################################################################################
#root: LatticeTools
#hfl: LatticeTools
#toc: _Overview
#LatticeTools,LatticeTools/Setup

LatticeTools:=module() option package;

export ModuleLoad, Setup,
       # Miscellaneous functions
       gfunRd, propRd,
       # Generic models
       BuildW, BuildA, BuildH, # Builders
       GreensF, StatSol, ZeroExpan,
       Velocity, DiffusionTensor, DiffusionLength, # Solvers
       PathExpansion, # Analyzers
       # Hypercubic lattice
       latDscX, latDscO, latDscONT, latDscCD, latDscED2, latDscp, # Basic functions
       latDscgL, latDschL, # Large-scale approximation
       latDscgP, latDschP, latDscPR, latDscN, latDscNc, latDscN_init, # Path expansion
       latDscgR, latDschR, latDscB, latDscM, # Recurrence
       latDscSZ, latDscScB, latDscSAJ2A, latDscSC, latDscSAB, latDscS, latDschpS, # Series at s=0
       latDscgI, latDscgI_alt, # Integral representations
       lat1g, lat1h, lat1go, lat1gos, lat1r, # 1D lattice
       lat2sqgo, lat2sqho, lat2sqgos, lat2sqr, lat2sqB, lat2sqadd, # 2D square lattice
       lat3scgo, lat3scho, lat3scgos, lat3scr, lat3scB, lat3scadd, # 3D simple cubic lattice
       lat3scgo0, lat3sc_q2xi, lat3sc_xi2q, lat3sc_xi2k, lat3scho_H0, lat3scho_H1, # 3D simple cubic lattice - special routines
       lat2triX, lat2triO, lat2triONT, lat2triCD, lat2triED2, lat2triadd, lat2trip,
       lat2trigP, lat2trihP, lat2triPR, lat2triN, lat2triNc,
       lat2trigo, lat2triho, lat2trir,
       lat2trigR, lat2trihR, lat2triB, lat2triM,
       lat2tri_q2xi, lat2tri_xi2q, lat2tri_xi2k; # 2D triangular lattice

local  version,t,s,x,v,
       lat3scgo0_sqrt, # Constants
       latDscNT, latDscNcT, latDscMT, latDscST, latDscSCT, lat2triNT, lat2triNcT, lat2triMT, # Tables for Green's function evaluation
       tb_binom, check_binom, AJ4, AJ5; # Auxiliary functions and related variables



ModuleLoad:=proc()
local AJ4,AJ5,d;
version:=20240506;
# BasicTools package is required
if not(member('BasicTools',packages())) then try with(BasicTools) catch: error "Cannot find the required BasicTools package: %1",lastexception end end;
if (BasicTools[Setup]('version')<20240506) then WARNING("Update BasicTools package to version from 06.05.2024 at least") end;
# Initialize
latDscN_init(4,1,100);
for d from 1 to 5 do  latDscS(d,0,0,20,1);  latDscSC(d,[]) end;
# Default settings
Setup();
NULL
end:


Setup:=proc({printout::boolean:=false})
ProcessSetupArgs([_rest],[],['version'])
end:





################################################################################
#hfl: Functions
#toc: Miscellaneous functions
#LatticeTools/Functions,gfunRd,propRd

gfunRd:=(d,s,r)->(2*Pi)^(-d/2)*(sqrt(s)/r)^(d/2-1)*BesselK(d/2-1,sqrt(s)*r):

propRd:=(d,t,r)->(4*Pi*t)^(-d/2)*exp(-r^2/4/t):



################################################################################
#hfl: Generic
#toc: Generic models
#LatticeTools/Generic,BuildW,BuildW,BuildA,BuildH,GreensF,StatSol,ZeroExpan,Velocity,DiffusionTensor,DiffusionLength,PathExpansion

BuildW:=proc(n::posint,s::{"Matrix","RandomMatrix","Generate","Sample","GamEps"},gen,{sym::boolean:=false})
local W,Gam,Eps,i,j;
if (s="Matrix") then
 W:=Matrix(n,gen,`if`(sym,shape=symmetric,NULL),_rest)
elif (s="RandomMatrix") then
 W:=LinearAlgebra[RandomMatrix](n,'generator'=gen,`if`(sym,shape=symmetric,NULL),_rest)
elif (s="Generate") then
 W:=Matrix(n,RandomTools[Generate](gen,'makeproc'=true),`if`(sym,shape=symmetric,NULL),_rest)
elif (s="Sample") then
 W:=Matrix(n,convert(Statistics[Sample](gen,n^2),list),_rest);
 if sym then W:=Matrix(W,shape=symmetric,_rest) end
elif (s="GamEps") then
 Gam:=Matrix(n,convert(Statistics[Sample](gen[1],n^2),list));
 Eps:=Statistics[Sample](gen[2],n);
 W:=Matrix(n,(i,j)->`if`(i=j,0,Gam[i,j]*exp(Eps[i])),_rest)
end;
for i from 1 to n do W[i,i]:=0 end;
for i from 1 to n do for j from 1 to n do if (W[i,j]<0) then error "W[%1,%2]=%3<0",i,j,W[i,j] end end end;
if (s="GamEps") then W,Gam,Eps else W end
end:


BuildA:=proc(W::Matrix,U::Vector:=Vector(op(1,W)[1],0),$)
local n,i,j,k;
n:=op(1,W)[1];
Matrix(n,(i,j)->`if`(i=j,-U[i]-add(W[i,k],k=1..n),W[i,j]),shape=MatrixOptions(W,shape),datatype=MatrixOptions(W,datatype))
end:


BuildH:=proc(tbH0::table,k::{name,indexable}:=undefined,{symmetric::boolean:=false,printout::boolean:=false},$)
local tbH,mmts,d,n,mmt,mmt2,rng,o,N,mts,m,mt,n2,mtsid,m2,H,Hk,vars;
tbH:=copy(tbH0);
mmts:=[indices(tbH)];
d:=nops(mmts[1])-2;
n:=max(seq(op(..2,mmt),mmt=mmts));
if symmetric then
 for mmt in mmts do
  mmt2:=[mmt[2],mmt[1],op(-mmt[3..])];
  if member(mmt2,mmts) then if (tbH[op(mmt2)]<>tbH[op(mmt)]) then error("Nonsymmetric tbH%1=%2<>%3=tbH%4",mmt2,tbH[op(mmt2)],tbH[op(mmt)],mmt) end
   else tbH[op(mmt2)]:=tbH[op(mmt)] end end;
 mmts:=[indices(tbH)] end;
rng:=[seq([(min,max)(map2(op,2+o,mmts))],o=1..d)];
N:=1+max(map(abs,map(op,rng)));
mts:=Sort(convert({seq(mmt[2..],mmt=mmts)} minus {seq([m,0$d],m=1..n)},list),mt->((add(mt[1+o]^2,o=1..d)*N^d+add(N^(o-1)*abs(mt[1+o]),o=1..d))*2^d+add(2^(o-1)*`if`(mt[1+o]<0,1,0),o=1..d))*n+mt[1]);
mts:=[seq([m,0$d],m=1..n),op(mts)];
n2:=nops(mts);
if printout then printf("d=%d, n=%d, n2=%d, |tbH|=%d, rng=%s\n",d,n,n2,nops(mmts),StringTools[DeleteSpace](sprintf("%a",rng))) end;
mtsid:=table([seq(mts[m2]=m2,m2=1..n2)]);
H,Hk:=Matrix(n,n2,`if`(hastype([entries(tbH,'nolist')],float),datatype=float,NULL)),Matrix(n);
for mmt in mmts do
 H[mmt[1],mtsid[mmt[2..]]]:=tbH[op(mmt)];
 Hk[op(..2,mmt)]:=Hk[op(..2,mmt)]+tbH[op(mmt)]*exp(I*add(k[o]*mmt[2+o],o=1..d)) end;
for m from 1 to n do Hk[m,m]:=evalc(Hk[m,m]) end;
vars:=indets(H);
if (vars<>{}) then
 Hk:=map(collect,Hk,vars);
 if printout then printf("vars=%s\n",StringTools[DeleteSpace](sprintf("%a",vars))) end end;
H,Hk,mts,op(mtsid)
end:


GreensF:=proc(s,W::Matrix,U::Vector:=Vector(op(1,W)[1],0),$)
local n,Gi, k;
n:=op(1,W)[1];
Gi:=Matrix(n,(i,j)->`if`(i=j,s+U[i]+add(W[i,k],k=1..n),-W[i,j]),shape=MatrixOptions(W,shape),datatype=`if`(type(s,float),float,MatrixOptions(W,datatype)));
Gi^(-1)
end:


StatSol:=proc(W::Matrix,i00::nonnegint:=0,simplifyf::procedure:=simplify,{printout::boolean:=false},$)
local A,params,i0,pi1,C,pi,i,v;
A:=BuildA(W);
params:=select(type,indets(A),name);
i0:=`if`(i00=0,`if`(params=[],op(MinIdx([seq(A[i,i],i=1..op(1,A)[1])])),1),i00);
pi1:=LinearAlgebra[LinearSolve](LinearAlgebra[Transpose](A[[..i0-1,i0+1..]$2]),LinearAlgebra[Transpose](-A[i0,[..i0-1,i0+1..]]));
C:=`minus`(select(type,indets(pi1),name),params);
if (C<>{}) then pi1:=simplify(subs(seq(v=0,v=C),pi1)) end;
pi:=Vector[row](op(1,pi1)+1,`if`(VectorOptions(pi1,'datatype')=float[8],'datatype'=float,NULL));
pi[i0]:=1;
pi[[..i0-1,i0+1..]]:=pi1;
pi:=LinearAlgebra[Normalize](pi,1);
if (params<>{} or simplifyf<>simplify) then pi:=simplifyf(pi) end;
if (printout and params={}) then printf("Norm(pi.A)= %.1e (L1), %.1e (Linf)\n",LinearAlgebra[Norm](pi.A,1),LinearAlgebra[Norm](pi.A,infinity)) end;
pi
end:


ZeroExpan:=proc(W::Matrix,i0::nonnegint:=0,simplifyf::procedure:=simplify,{printout::boolean:=false},$)
local dtdecl,pi,n,T,Ti,i,lsi,W2,pi2,R2,R,j,v;
dtdecl:=`if`(MatrixOptions(W,'datatype')=float[8],'datatype'=float,NULL);
pi:=StatSol(W,i0,simplifyf,':-printout'=printout);
n:=op(1,pi);
T:=Matrix(n,n-1,(i,j)->`if`(i=j+1,1,0)-pi[j+1],dtdecl);
Ti:=Matrix(n-1,n,dtdecl);
for i from 1 to n-1 do  Ti[i,1]:=-1;  Ti[i,i+1]:=1 end;
try pi,T.LinearAlgebra[MatrixInverse](-Ti.BuildA(W).T).Ti
catch:
 lsi:=[seq(`if`(pi[i]=0,NULL,i),i=1..n)];
 if printout then printf("Singular matrix, will use subspace [%{c,}d%s]\n",Vector(lsi[..min(16,nops(lsi))]),`if`(nops(lsi)>16,",...","")) end;
 W2:=W[lsi,lsi];
 if (add(abs(v),v=W2)=0) then return pi,Matrix(n,dtdecl) end;
 pi2,R2:=ZeroExpan(W2,':-printout'=printout);
 R:=Matrix(n,dtdecl);
 R[lsi,lsi]:=R2;
 pi,R end
end:


Velocity:=proc( sites::Array, W::Matrix, M::Matrix:=LinearAlgebra[IdentityMatrix](Dim2(sites)[2]),
  replicas::{'undefined',Vector}:='undefined', i0::nonnegint:=0, simplifyf::procedure:=simplify, { printout::boolean:=false },$)
local n,n2,d,dtdecl,repl,i,pi, j,l;
n,n2:=Dim2(W);
d:=Dim2(sites)[2];
dtdecl:=`if`(MatrixOptions(W,datatype)=float or MatrixOptions(W,datatype)[0]=float,datatype=float,NULL);
for i from 1 to n do W[i,i]:=0 end:
if (replicas='undefined') then
 repl:=Vector(n,i->[]):
 for i from 1 to n2 do repl[sites[i,0]]:=[op(repl[sites[i,0]]),i] end
else
 repl:=replicas end;
pi:=StatSol(Matrix(n,(i,j)->`if`(i=j,0,add(W[i,l],l=repl[j])),dtdecl),i0,simplifyf,':-printout'=printout);
Vector[column](pi.Matrix(n,d,(i,o)->add(W[i,j]*sites[j,o],j=1..n2),dtdecl).LinearAlgebra[Transpose](M),dtdecl)
end:


DiffusionTensor:=proc( sites::Array, W::Matrix, M::Matrix:=LinearAlgebra[IdentityMatrix](Dim2(sites)[2]),
 replicas::{'undefined',Vector}:='undefined', i0::nonnegint:=0, simplifyf::procedure:=simplify, { printout::boolean:=false },$)
local n,n2,d,dtdecl,repl,i,Wp,Wpp,pi,R,uv,j,l,o,o1,o2;
n,n2:=Dim2(W);
d:=Dim2(sites)[2];
dtdecl:=`if`(MatrixOptions(W,datatype)=float or MatrixOptions(W,datatype)[0]=float,datatype=float,NULL);
for i from 1 to n do W[i,i]:=0 end:
if (replicas='undefined') then
 repl:=Vector(n,i->[]):
 for i from 1 to n2 do repl[sites[i,0]]:=[op(repl[sites[i,0]]),i] end
else
 repl:=replicas end;
pi,R:=ZeroExpan(Matrix(n,(i,j)->`if`(i=j,0,add(W[i,l],l=repl[j])),dtdecl),i0,simplifyf,':-printout'=printout);
Wp:=Vector(d,o->Matrix(n,(i,j)->add(W[i,l]*sites[l,o],l=repl[j]),dtdecl));
Wpp:=Matrix(d,(o1,o2)->Matrix(n,(i,j)->add(W[i,l]*sites[l,o1]*sites[l,o2],l=repl[j]),dtdecl));
uv:=Vector(n,1):
Matrix(M.Matrix(d,(o1,o2)->(pi.Wpp[o1,o2].uv+pi.Wp[o1].R.Wp[o2].uv+pi.Wp[o2].R.Wp[o1].uv)/2,shape=symmetric,dtdecl).LinearAlgebra[Transpose](M),shape=symmetric,dtdecl)
end:


DiffusionLength:=proc( sites::Array, W::Matrix, U::Vector, points::Matrix, M::Matrix:=LinearAlgebra[IdentityMatrix](Dim2(sites)[2]), replicas::{'undefined',Vector}:='undefined', { printout::boolean:=false },$)
local n,n2,d,dtdecl,repl,i,G,Wp,Wpp,Up,Upp,uv, l;
n,n2:=Dim2(W);
d:=Dim2(sites)[2];
dtdecl:=`if`(MatrixOptions(W,datatype)=float or MatrixOptions(W,datatype)[0]=float,datatype=float,NULL);
for i from 1 to n do W[i,i]:=0 end:
if (replicas='undefined') then
 repl:=Vector(n,i->[]):
 for i from 1 to n2 do repl[sites[i,0]]:=[op(repl[sites[i,0]]),i] end
else
 repl:=replicas end;
G:=GreensF(0,Matrix(n,(i,j)->`if`(i=j,0,add(W[i,l],l=repl[j])),dtdecl),U);
Wp:=Vector(d,o->Matrix(n,(i,j)->add(W[i,l]*sites[l,o],l=repl[j]),dtdecl));
Wpp:=Matrix(d,(o1,o2)->Matrix(n,(i,j)->add(W[i,l]*sites[l,o1]*sites[l,o2],l=repl[j]),dtdecl));
Up:=Vector(d,o->Vector(n,i->U[i]*points[o,i],dtdecl));
Upp:=Matrix(d,(o1,o2)->Vector(n,i->U[i]*points[o1,i]*points[o2,i],dtdecl));
uv:=Vector(n,1):
Vector(n,i->Matrix(M.Matrix(d,(o1,o2)->G[i,..].(Wpp[o1,o2].uv+Wp[o1].G.Wp[o2].uv+Wp[o2].G.Wp[o1].uv+Wp[o1].G.Up[o2]+Wp[o2].G.Up[o1]+Upp[o1,o2])/2,shape=symmetric,dtdecl).LinearAlgebra[Transpose](M),shape=symmetric,dtdecl))
end:


PathExpansion:=proc(H::Matrix,E::numeric,oi::posint,of::posint,vmin::numeric,Nmax::posint,subsys::list(posint):=[oi,of],
  {Lmax::posint:=99,neglect::numeric:=1e-3,printout::boolean:=false,digits::posint:=3,nprint::posint:=9},$)
local n,env,vmin2,maxorder2,tau,T,Lmax2,L,vmax,ls,o,o1,o2,v;
n:=Dim2(H)[1];
env:=remove(member,[$1..n],subsys);
vmin2:=neglect*vmin;
maxorder2:=-round(log10(vmin))-digits;
if printout then printf("oi=%d, of=%d, Ei=%.*f, Ef=%.*f, E=%.*f\n",oi,of,digits,H[oi,oi],digits,H[of,of],digits,E) end;
tau:=Matrix(n,(o1,o2)->`if`(o1=o2,0,H[o1,o2]/(E-H[o2,o2])),datatype=float);
T:=table([0=[[1,oi]]]);
Lmax2:=Lmax;
for L from 1 to Lmax2 do
 T[L]:=remove(v->abs(v[1])<vmin,[seq(seq([v[1]*tau[v[-1],o],op(2..,v),o],v=T[L-1]),o=env)]);
 if (T[L]=[]) then  unassign('T[L]');  Lmax2:=L-1;  break end;
 if printout then printf("%2d %8d %*.*f  %s\n",L,nops(T[L]),digits+4,digits,add(v[1],v=T[L]),FormatFloat(max(map(v->abs(v[1]),T[L])),digits,'maxorder'=maxorder2)) end;
 if (nops(T[L])>Nmax) then  T[L]:=Sort(T[L],v->-abs(v[1]))[..Nmax];  WARNING("Too many terms, cut at %1",sprintf("%.0e",abs(T[L][-1][1]))) end end;
if printout then printf("Capping and removing small terms:\n") end;
for L from 0 to Lmax2 do T[L]:=remove(v->abs(v[1])<vmin2,map(v->[v[1]*H[v[-1],of],op(3..,v)],T[L])) end;
for L from Lmax2 by -1 to 1 while (T[L]=[]) do unassign('T[L]') end;
Lmax2:=L;
if printout then
 for L from 0 to Lmax2 do printf("%2d %8d %*.*f  %s\n",L,nops(T[L]),digits+4,digits,add(v[1],v=T[L]),FormatFloat(`if`(T[L]=[],0,max(map(v->abs(v[1]),T[L]))),digits,'maxorder'=maxorder2)) end;
 printf("Hbare=%.*f, Hrenorm=%.*f, Hpath=%.*f\nLargest elements:\n",digits,H[oi,of],digits,H[oi,of]+H[oi,env].(E-H[env,env])^(-1).H[env,of],digits,add(add(v[1],v=T[L]),L=0..Lmax2));
 vmax:=max(seq(seq(abs(v[1]),v=T[L]),L=0..Lmax2));
 ls:=Sort([seq(op(remove(v->abs(v[1])<vmax/100,T[L])),L=0..Lmax2)],v->-abs(v[1]));
 seq(printf("%*.*f [%{c,}d]\n",digits+4,digits,v[1],Vector(v[2..])),v=ls[..min(nprint,nops(ls))]) end;
op(T)
end:



################################################################################
#hfl: LGFhc
#toc: Hypercubic lattice
#LatticeTools/LGFhc,latDscX,latDscO,latDscONT,latDscCD,latDscED2,latDscp,latDscgL,latDschL,latDscgP,latDschP,latDscPR,latDscN,latDscNc,latDscN_init,latDscgR,latDschR,latDscB,latDscM,latDscSZ,latDscScB,latDscSAJ2A,latDscSC,latDscSAB,latDscS,latDschpS,latDscgI,latDscgI_alt,lat1g,lat1h,lat1go,lat1gos,lat1r,lat2sqgo,lat2sqho,lat2sqgos,lat2sqr,lat2sqB,lat2sqadd,lat3scgo,lat3scho,lat3scgos,lat3scr,lat3scB,lat3scadd,lat3scgo0,lat3sc_q2xi,lat3sc_xi2q,lat3sc_xi2k,lat3scho_H0,lat3scho_H1

latDscX:=X->Rort(map(abs,X)):


latDscO:=proc(X0::list,{sorted::boolean:=false},$)
local X,L,i,v;
X:=`if`(sorted,X0,latDscX(X0));
L:=combinat[permute](X);
for i from 1 to nops(X) do L:=[op(L),seq(`if`(v[i]=0,NULL,subsop(i=-v[i],v)),v=L)] end;
L
end:


latDscONT:=proc(X0::list,{sorted::boolean:=false},$)
local d,X,xn,L0,L,n0,N,v;
d:=nops(X0);
X:=`if`(sorted,X0,latDscX(X0));
xn:=map(v->[lhs(v),nops(rhs(v))],op(Classify2(X,v->v)));
L0,L:=selectremove(`=`,X,0);
n0:=nops(L0);
L:=Rort(map(v->nops(rhs(v)),op(Classify2(L,v->v))));
combinat[multinomial](d,n0,op(L))*2^(d-n0),[n0,op(L)]
end:


latDscCD:=X->add(abs(v),v=X):


latDscED2:=X->add(v^2,v=X):


latDscp:=(t,X)->exp(-2*nops(X)*t)*mul(BesselI(x,2*t),x=X):

### Large-scale approximations


latDscgL:=proc(s::numeric,X0::list,{fulloutput::boolean:=false})
local d,X,xmax,d1,eta,kappa,g,v,i;
d:=nops(X0);
X:=latDscX(X0);
xmax:=X[1];
d1:=latDscCD(X)/xmax;
eta:=fZero(eta->d+s/2-add(sqrt(1+eta^2*X[i]^2),i=1..d),0.999*sqrt(s/d*(1+s/4/d))/xmax..1.001*sqrt(s*(1+s/4))/xmax, sqrt(s/d1*(1+s/4/d1))/xmax, _rest);
kappa:=[seq(evalf(arcsinh(eta*v)),v=X)];
g:=evalf((eta/2/Pi)^((d-1)/2)/2/sqrt(mul(cosh(v),v=kappa)*add(sinh(v)*tanh(v),v=kappa))*exp(-add(kappa[i]*X[i],i=1..d)));
if fulloutput then g,eta,kappa,X else g end
end:


latDschL:=proc(q,X::list(integer)) latDscgL(2*nops(X)*(1/q-1),X,_rest) end:

### Path expansion


latDscgP:=proc(s,X::list(integer)) latDschP(1/(1+s/(2*nops(X))),X,_rest) end:


latDschP:=proc(q,X::list(integer),N0::integer:=-1,output::string:=`if`(type(q,numeric),"","v"),digits::set(posint):={8},$)
local d,C,q1,q2,N,x1,v,n,R,r,Nmin;
d:=nops(X);
if type(q,numeric)
 then  C:=latDscNc(max(N0,0),X,'all');  q1:=q;    
 else  C:=latDscN (max(N0,0),X,'all');  q1:=q/2/d   end;
N:=`if`(N0<0,Dim2(C),N0);
x1:=latDscCD(X);
if type(q,numeric)
 then  q2:=q^2;  v:=0;  for n from N by -1 to 0 do v:=C[n]+v*q2 end;  v:=v*q1^(1+x1)
 else  v:=add(C[n]*q1^(2*n+1+x1),n=0..N) end;
if (output="v") then return v end;
R:=latDscPR(q,X,N+1);
if (output="c") then v+R elif (output="r") then [v+R,R] else
 if type(q,numeric) then
  r:=evalf(R/v);  if (r>10^(-digits[1])) then WARNING("Loss of precision: r=%1",r) end;
  Nmin:=round((latDscED2(X)-x1)/2);  if (N>10 and N<Nmin) then  WARNING("Increase N at least to %1",Nmin);  if (2*N<Nmin) then return v end end end;
 v+R end
end:


latDscPR:=proc(q,X::list,N,shift:=0,$)
local d,x1,x2;
d,x1,x2:=nops(X),latDscCD(X),latDscED2(X);
(d/4/Pi)^(d/2)/d*q^(2*N+1+x1)*LerchPhi2(q^2,d/2,N+(shift+1/2+x1+x2)/2)
end:


latDscN:=proc(n::nonnegint,X0::list(integer),{sorted::boolean:=false,all::boolean:=false},$)
local X,d,A,n1,x,x1,x12,d12,A1,A2,m,k,v;
X:=`if`(sorted,X0,latDscX(X0));
if (assigned('latDscNT[op(X)]') and Dim2(latDscNT[op(X)])>=n) then `if`(all,latDscNT[op(X)],latDscNT[op(X)][n]) else
 d:=nops(X);
 A:=Array(0..n,datatype=integer);
 if assigned('latDscNT[op(X)]') then
  n1:=Dim2(latDscNT[op(X)]);
  A[0..n1]:=latDscNT[op(X)]
 else
  n1:=-1 end;
 x:=add(v,v=X);
 x1:=X[1];
 check_binom(2*n+d*x1,100);
 if   (d=1) then for m from n1+1 to n do A[m]:=tb_binom[2*m+x,m] end
 elif (d=2) then for m from n1+1 to n do A[m]:=tb_binom[2*m+x,m]*tb_binom[2*m+x,m+x1] end
 else
  d12:=d-iquo(d,2);
  x12:=add(x,x=X[..d12]);
  A1:=latDscN(n,X[..d12]  ,':-sorted'=true,':-all'=true);
  A2:=latDscN(n,X[d12+1..],':-sorted'=true,':-all'=true);
  for m from n1+1 to n do A[m]:=add(A1[k]*tb_binom[2*m+x,2*k+x12]*A2[m-k],k=0..m) end end;
 latDscNT[op(X)]:=A;
 if not(assigned('latDscNcT[op(X)]') and Dim2(latDscNcT[op(X)])>=n) then latDscNcT[op(X)]:=Array(0..n,k->evalf[Digits+10](A[k]/(2*d)^(2*k+1+x)),datatype=float) end;
 `if`(all,A,A[n]) end
end:


latDscNc:=proc(n::nonnegint,X0::list(integer),{sorted::boolean:=false,all::boolean:=false},$)
local X;
X:=`if`(sorted,X0,latDscX(X0));
if (assigned('latDscNcT[op(X)]') and Dim2(latDscNcT[op(X)])>=n) then `if`(all,latDscNcT[op(X)],latDscNcT[op(X)][n]) else
  latDscN(n,X,':-sorted'=true);  latDscNc(n,X,':-sorted'=true,':-all'=all) end
end:


latDscN_init:=proc(d::integer,L::nonnegint,N::nonnegint,{maxsize1::posint:=2*10^5,maxsize2::posint:=2*10^5,printout::boolean:=false},$)
local size1,size2,d2,X,i,v;
if (d<1) then
 latDscNT:=table();
 if (d< 0) then tb_binom:=Array(0..0,0..0,1,datatype=integer) end;
 if (d<-1) then latDscNcT:=table() end;
 gc();
 return end;
size1:=(N+1)*(N+2)/2;
size2:=(N+1)*add(binomial(L+i,i),i=1..d);
if printout then printf("size(binom)=%d, size(latDscNT)=%d\n",size1,size2) end;
if (size1>maxsize1) then error("maxsize1=%1 exceeded by factor of %2",maxsize1,round(size1/maxsize1)) end;
if (size2>maxsize2) then error("maxsize2=%1 exceeded by factor of %2",maxsize2,round(size2/maxsize2)) end;
v:=check_binom(2*N+d*L);  if printout then printf("binomial coeff up to %d\n",v) end;
for d2 from 1 to d do
 X:=[0$d2];
 while (X[1]<=L) do  latDscN(N,X,'sorted');  X:=nextpointS(X) end;
 if printout then printf("d=%d completed\n",d2) end end;
NULL
end:

### Recurrent evaluation


latDscgR:=proc(s,X::list(integer)) latDschR(1/(1+s/(2*nops(X))),X,_rest) end:


latDschR:=proc(q,X::list(integer),output::string:=`if`(type(q,numeric),"v","l"),$)
local d,x1,n1,M,L,B,v,i,n;
d:=nops(X);
x1:=latDscCD(X);
n1:=`if`(type(x1,odd),-1,1);
M:=latDscM(X);
L:=[seq(add(M[i,n]*(d/q)^(2*(n-1)+`if`(type(i+x1,even),n1,0)),n=1..Dim2(M)[2]),i=1..1+d)];
if (output="l") then L else  B:=latDscB(d,q);  add(L[i]*B[i],i=1..1+d) end
end:


latDscB:=proc(d::posint,q)
local X,n;
if   (d=1) then [q/2/sqrt(1-q^2),(1/sqrt(1-q^2)-1)/2]
elif (d=2) then lat2sqB(q,_rest)
elif (d=3) then lat3scB(q,_rest)
else [seq(latDschP(q,X,_rest),X=[seq([1$n,0$(d-n)],n=0..d)])] end
end:


latDscM:=proc(X0::list(integer),{sorted::boolean:=false},$)
local X,d,x,M,Y,M2,n,n1,i,j,k,v;
X:=`if`(sorted,X0,latDscX(X0));
if assigned('latDscMT[op(X)]') then latDscMT[op(X)] else
 d:=nops(X);
 x:=add(v,v=X);
 if (X[1]<=1) then  M:=Matrix(1+d,1);  M[1+x,1]:=1 else
  Y:=subsop(1=X[1]-1,X);
  M2:=latDscM(Y);
  n:=Dim2(M2)[2];
  n1:=`if`(type(x,odd),1,0);
  M:=Matrix(1+d,n+n1);
  M[..,1+n1..]:=M2;
  for i from d by -1 to 1 do
   M2:=latDscM(subsop(i=Y[i]-1,Y));
   n:=Dim2(M2)[2];
   for j from 1 to 1+d do for k from 1 to n do M[j,k]:=M[j,k]-M2[j,k] end end end;
  LinearAlgebra[MatrixScalarMultiply](M,2*Y[1]/(x-1),'inplace');
  for j from 1 to 1+d do for k from 1 to n do M[j,k]:=M[j,k]+M2[j,k] end end end;
 latDscMT[op(X)]:=M;
 M end
end:

### Series at s=0


latDscSZ:=(d,p)->p^(d-2)*`if`(type(d,odd),1,ln(`if`(d=2,4,1)/p));


latDscScB:=d->(-1)^iquo(d-1,2)*(d/Pi)^(d/2-1)/2^d/GAMMA(d/2)*`if`(type(d,odd),1,2/Pi):


latDscSAJ2A:=proc(d::posint,AJ::list,BA::Array,extra::integer:=0,{p0::anything:=1},$)
local kA,c,e,q,z,w,k,BR,kD,aJ,DJ,m;
kA:=d-2+extra;
if (nops(AJ)<kA+1) then error("AJ is to short") end;
if type(d,odd) then
 e:=series(subs(w=d*(1/sqrt(1-z)-1),add(AJ[1+k]*w^k,k=0..kA)*(1+w/d)/2),z,kA+1);
 c:=[seq(coeff(e,z,k),k=0..d-2)];
 BR:=[0$(kA+1)]
else
 BR:=[seq(simplify(latDscScB(d))*(BA[d,0,k]+`if`(k+1-d/2<0,0,ln(sqrt(d/2)/p0)*BA[0,0,k+1-d/2])),k=0..kA)];
 kD:=d/2-1+extra;
 e:=series(hypergeom([1/2,1/2],[],z/2)^d,z,kD+1);
 aJ:=[seq(coeff(e,z,k),k=0..kD)];
 DJ:=[seq((-1)^k*aJ[1+k]/(-2*Pi)^(d/2)/GAMMA(k+d/2),k=0..kD)];
 e:=subs(w=d*(1/sqrt(1-z)-1),(add(AJ[1+k]*w^k,k=0..kA)+ln(w)*add(DJ[1+k]*w^(k+d/2-1),k=0..kD))*(1+w/d)/2);
 e:=collect(subs(ln(z)=ln(2/d),convert(series(e,z,kA+1),polynom)),z,expand@simplify);
 c:=[seq(evalf(coeff(e,z,k)-BR[1+k]),k=0..d-2)] end;
if (extra>0) then print([seq(evalf(add(c[m]*BA[m,0,k],m=1..d-1)+BR[1+k]=coeff(e,z,k)),k=0..kA)]) end;
c
end:


latDscSC:=proc(d::posint,mv::{nonnegint,list}:=-1,$)
local C;
if type(mv,integer) then `if`(mv<0,latDscSCT[d],latDscSCT[d][mv]) else
 if (mv=[]) then
  C:=piecewise(d=1,[],
               d=2,[0],
               d=3,[lat3scgo0,lat3scgo0*9/32+3/(64*Pi^2*lat3scgo0)],
               d=4,evalf[50](latDscSAJ2A(4,AJ4,latDscST[4])),
               d=5,evalf[50](latDscSAJ2A(5,AJ5,latDscST[5])),
               undefined);
  C:=[op(C),simplify(latDscScB(d))]
 else
  if (nops(mv)<>d) then error("Inconsistent size for d=%1: %2",d,mv) else C:=mv end end;
 latDscSCT[d]:=copy(C) end
end:


latDscSAB:=proc(a0::{list,Array},b0::{atomic,Array},N::posint,dN::posint:=1,IC::list(`=`):=[0=0],{printout::boolean:=false},$)
global latDscSAB_vars;
local NA,NB,N1,A,B,d,a,b,A1,B1,H2,H2q,MHq,MH,e,AB,sol1,sol2,vars, v,q,z,hq,h,k,n,i,ct;
if (dN>1) then
 NA,NB:=`if`(type(a0,Array),Dim2(a0)[2],0),`if`(type(b0,Array),Dim2(b0)[2],0);
 N1:=`if`(NA>0 and NB>0,min(NA,NB),`if`(NA>0 and b0=0,NA,0));
 N1:=(round(N1/dN)+1)*dN;
 A,B:=latDscSAB(a0,b0,N1,IC);
 for N1 from N1+dN by dN to N do A,B:=latDscSAB(A,B,N1,IC) end;
 return A,B end;
latDscSAB_vars:=table();
d:=`if`(type(a0,Array),Dim2(a0)[1],nops(a0)+1);
if type(a0,Array) then a:=table([seq(seq((n,k)=a0[n,k],k=0..Dim2(a0)[2]),n=0..d)]) else
 a:=table([(1,0)=0]);
 if (IC=[0=0]) then for k from 0 to d-2 do a[0,k]:=a0[1+k] end else for v in IC do assign(a[lhs(v)],rhs(v)) end end end;
b:=table(`if`(type(b0,Array), [seq(seq((n,k)=b0[n,k],k=0..Dim2(b0)[2]),n=0..d)], [seq((n,0)=b0,n=0..d)]));
a[0,N+1]:=0;
b[0,N+1]:=0;
A1:=Array(0..d,n->add(a[n,k]*z^k,k=0..N+1));
B1:=`if`(b0=0,Array(0..d,0),Array(0..d,n->add(b[n,k]*z^k,k=0..N+1)));
H2:=Array(0..d,1..2,(n,i)->q^(1-n)*`if`(i=1,A1[n],B1[n]));
H2q:=Array(0..d,1..2,(n,i)->-q^(-n)*`if`(i=1,(n-1)*A1[n]+2*(1-z)*(diff(A1[n],z)-`if`(type(d,odd),0,z^(d/2-2)/2*B1[n])),
                                             (n-1)*B1[n]+2*(1-z)*(diff(B1[n],z)+(d/2-1)/z*B1[n])));
MHq:=Array(0..d,0..d):  for n from 0 to d do  MHq[n,n]:=1;  if (n>0) then MHq[n,n-1]:=-n/d*q end;  if (n<d) then MHq[n,n+1]:=-(1-n/d)*q end end;
MH:=Array(0..d,n->-(n-1)/q);
if printout then  latDscSAB_vars["MHq"]:=MHq;  latDscSAB_vars["MH"]:=MH;
  print(Matrix(MHq).Vector(d+1,n->hq[n-1])=LinearAlgebra[DiagonalMatrix](MH).Vector(d+1,n->h[n-1])) end;
e:=Matrix(MHq).Matrix(H2q)-LinearAlgebra[DiagonalMatrix](MH).Matrix(H2);
e:=Array(0..d,1..2,(n,i)->e[1+n,i]);
ct:=time();
for n from 0 to d do for i from 1 to 2 do
 e[n,i]:=collect(subs(q^2=1-z,simplify(e[n,i]*q^n)),z);
 if has(e[n,i],q) then error("q is in e[%1,%2]",n,i) end;
 if (ldegree(e[n,i],z)<0) then error("Wrong ldegree in e[%1,%2]",n,i) end end end;
if printout then  print("e",time()-ct);  latDscSAB_vars["e"]:=e end;
ct:=time();
AB:=Array(0..d,1..2,0..N+1,(n,i,k)->coeff(e[n,i],z,k));
if printout then  print("AB",time()-ct);  latDscSAB_vars["AB0"]:=copy(AB) end;
if (b0<>0) then
 ct:=time();
 sol1:=solve({seq(seq(AB[n,2,k],n=0..d),k=0..N)});
 if printout then  print("sol1",time()-ct);  latDscSAB_vars["sol1"]:=sol1 end;
 if (sol1=NULL) then error("No solution for B") end;
 AB:=subs(sol1,AB) end;
B:=`if`(b0=0,Array(0..d,0..N,0),subs(sol1,Array(0..d,0..N,(n,k)->b[n,k])));
if printout then  latDscSAB_vars["AB1"]:=copy(AB);  vars:=indets(AB[..,2,..]);  if (vars<>{}) then print(vars) end;  latDscSAB_vars["B"]:=B end;
ct:=time();
sol2:=solve([seq(seq(AB[n,1,k],n=0..d),k=0..N)]);
if printout then  print("sol2",time()-ct);  latDscSAB_vars["sol2"]:=sol2 end;
if (sol2=NULL) then error("No solution for A") end;
AB:=subs(sol2,AB);
A:=subs(sol2,Array(0..d,0..N,(n,k)->a[n,k]));
if printout then  latDscSAB_vars["AB2"]:=copy(AB);  vars:=indets(AB);  if (vars<>{}) then print(vars) end;  latDscSAB_vars["A"]:=A;  print(Matrix(A[..,..min(N,6)]),Matrix(B[..,..min(N,6)])) end;
A,B
end:


latDscS:=proc(d::posint,m::nonnegint,n::nonnegint,k::nonnegint,dN::posint:=20,{all::boolean:=false},$)
local N,IC,BA,A,B,j;
if (assigned('latDscST[d]') and Dim2(latDscST[d])[3]>=k) then `if`(all,latDscST[d],latDscST[d][m,n,k]) else
 N:=ceil(k/dN)*dN;
 IC:=`if`(assigned('latDscST[d]'),[seq([latDscST[d][j,..,..],0],j=1..d-1),[latDscST[d][d,..,..],latDscST[d][0,..,..]]],
                                  [seq([subsop(j=1,[0$(d-1)]),0],j=1..d-1),[[0$(d-1)],1]]);
 BA:=Array(0..d,0..d,0..N);
 for j from 1 to d do
  A,B:=latDscSAB(op(IC[j]),N,dN);
  BA[j,..,..]:=A;
  if (j=d) then BA[0,..,..]:=B end end;
 latDscST[d]:=copy(BA);
 `if`(all,BA,BA[m,n,k]) end
end:


latDschpS:=proc(p,X0::list,N0::nonnegint:=0,{sorted::boolean:=false,basis::boolean:=false},$)
local d,X,x1,BA,N,C,V,VBA, v,q,m,n,k;
d:=nops(X0);
X:=`if`(sorted,X0,latDscX(X0));
x1:=latDscCD(X);
BA:=latDscS(d,0,0,N0,'all');
N:=`if`(N0=0,Dim2(BA)[3],N0);
C:=latDscSC(d);
V:=latDschR(q,X,"l");
V:=[seq(expand(V[1+n]*q^(1-n)),n=0..d)];  if (-min(map(ldegree,V,q))<>x1-1) then error("Inconsistent polynomial order V: #1",V) end;
V:=map(v->algsubs(q^2=1-p^2,expand(q^(x1-1)*v)),V);  if has(V,q) then error("Unremovable q in V: #1",V) end;
VBA:=Array(0..d,m->add(V[1+n]*add(BA[m,n,k]*p^(2*k),k=0..N),n=0..d));
if not(type(p,numeric)) then VBA:=map(v->sort(expand(v),p,'ascending'),VBA) end;
if basis then VBA else add(C[m]*VBA[m],m=1..d)+C[d]*VBA[0]*latDscSZ(d,p)+V[1+1]*(`if`(d=1,0,C[1])-1/2/d) end
end:

### Integral representations


latDscgI:=(s,X)->Int(exp(-(s+2*nops(X))*t)*mul(BesselI(x,2*t),x=X),t=0..infinity):


latDscgI_alt:=(s,X)->I^(-1-add(x,x=X))*Int(exp(I*(s+2*nops(X))*t)*mul(BesselJ(x,2*t),x=X),t=0..infinity):

### 1D lattice


lat1g:=(s,x)->(1+s/2+sqrt(s*(1+s/4)))^(-abs(x))/sqrt(s*(4+s)):


lat1h:=(q,x)->q^(1+abs(x))/(2*sqrt(1-q^2)*(1+sqrt(1-q^2))^(abs(x))):


lat1go:=s->1/sqrt(s*(4+s)):


lat1gos:=s->-(2+s)*(s*(4+s))^(-3/2):


lat1r:=s->piecewise(s>=0 and s<=4,1/sqrt(s*(4-s))/Pi,0):

### 2D square lattice


lat2sqgo:=s->lat2sqho(1/(1+s/4)):


lat2sqho:=q->q*EllipticK(q)/(2*Pi):


lat2sqgos:=s->-EllipticE(1/(1+s/4))*2/(Pi*s*(8+s)):


lat2sqr:=s->piecewise(s>=0 and s<=8,EllipticK(sqrt(s/2*(1-s/8)))/(2*Pi^2),0):


lat2sqB:=proc(q)
local K,E,h0,h1,h2;
if (_nrest=2) then K,E:=_rest else
 K:=EllipticK(q)*2/Pi;
 E:=EllipticE(q)*2/Pi end;
h0:=q/4*K;
h1:=(K-1)/4;
h2:=((2-q^2)*K-2*E)/(4*q);
[h0,h1,h2]
end:


lat2sqadd:=proc(f::procedure(anything,anything),L::posint,$) local x,y; f(0,0)+4*add(f(x,0),x=1..L)+4*add(f(x,x),x=1..L)+8*add(add(f(x,y),y=1..x-1),x=2..L) end:

### 3D simple cubic lattice


lat3scgo:=s->lat3scho(1/(1+s/6)):


lat3scho:=proc(q,$) local xi;  xi:=lat3sc_q2xi(q);  q*(1-9*xi^4)/(6*(1-xi)^3*(1+3*xi))*(EllipticK(lat3sc_xi2k(xi))*2/Pi)^2 end:


lat3scgos:=proc(s)
local xi,k,K,E;
if (_nrest=3) then xi,K,E:=_rest else
 xi:=lat3sc_q2xi(1/(1+s/6));
 k:=lat3sc_xi2k(xi);
 K:=EllipticK(k)*2/Pi;
 E:=EllipticE(k)*2/Pi end;
(2*(1-5*xi^2)*K-3*(1-xi)^3*(1+3*xi)*E)*K*xi^2*(1+xi)*(1-3*xi)/((1-xi)^2*(1-18*xi^2+9*xi^4)*(1-2*xi^2+9*xi^4))
end:


lat3scr:=s->piecewise(s>=0 and s<=12,signum(s-6)*Im(lat3scgo(-s))/Pi,0):


lat3scB:=proc(q)
local xi,k,K,E,L,K1,K2,v9,v0,v1,v2,h0,h1,h2,h3;
if (_nrest>=3) then xi,K,L:=_rest[..3] else
 xi:=lat3sc_q2xi(q);
 k:=lat3sc_xi2k(xi);
 K:=EllipticK(k)*2/Pi;
 E:=EllipticE(k)*2/Pi;
 L:=K-E end;
if (_nrest>=5) then K1,K2:=_rest[4..5] else
 K1:=8*xi^2*K-(1-xi)*(1+3*xi^2)*L;
 K2:=8*xi^3*K-(1-xi)^2*(1-3*xi^2)*L end;
v9:=(1-9*xi^4);
v0:=v9/((1-xi)^3*(1+3*xi))*K^2;
h0:=q/6*v0;
h1:=(v0-1)/6;
v1:=K1/((1+xi)*(1-3*xi));
v2:=K2/((1-xi)*xi^2);
h3:=3/64*v1*v2;
h2:=(3/32*(4*K1*v1+K2*v2*(1+3*xi))/v9-2*h3)/q;
[h0,h1,h2,h3]
end:


lat3scadd:=proc(f::procedure(anything,anything,anything),L::posint,$) local x,y,z; f(0,0,0)+6*add(f(x,0,0),x=1..L)+8*add(f(x,x,x),x=1..L)+12*add(f(x,x,0),x=1..L)
  +24*add(add(f(x,y,0),y=1..x-1),x=2..L)+24*add(add(f(x,x,z),z=1..x-1),x=2..L)+24*add(add(f(x,z,z),z=1..x-1),x=2..L)+48*add(add(add(f(x,y,z),z=1..y-1),y=2..x-1),x=3..L) end:

### 3D simple cubic lattice - special routines


lat3scgo0:=(sqrt(3)+1)*Pi/(12*(GAMMA(23/24)*GAMMA(13/24))^2):
lat3scgo0_sqrt:=sqrt((sqrt(3)+1)*Pi/12)/(GAMMA(23/24)*GAMMA(13/24)):


lat3sc_q2xi:=q->sqrt((1-sqrt(1-q^2/9))/(1+sqrt(1-q^2))):


lat3sc_xi2q:=xi->6*xi*sqrt(1-xi^2)*sqrt(1-9*xi^2)/(1-9*xi^4):


lat3sc_xi2k:=xi->sqrt(16*xi^3/((1-xi)^3*(1+3*xi))):


lat3scho_H0:=q->q/6*HeunG(9,3/4,1/4,3/4,1,1/2,q^2)^2:


lat3scho_H1:=q->q*(lat3scgo0_sqrt*HeunG(-8,-9/16,1/4,3/4,1/2,1,1-q^2)-1/8/Pi/lat3scgo0_sqrt*sqrt(3*(1-q^2))*HeunG(-8,-69/16,3/4,5/4,3/2,1,1-q^2))^2:



################################################################################
#hfl: LGFcp
#toc: Close packed lattices
#LatticeTools/LGFcp,lat2triX,lat2triO,lat2triX,lat2triO,lat2triONT,lat2triCD,lat2triED2,lat2triadd,lat2trip,lat2trigP,lat2trihP,lat2triPR,lat2triN,lat2triNc,lat2trigo,lat2triho,lat2trir,lat2trigR,lat2trihR,lat2triB,lat2triM,lat2tri_q2xi,lat2tri_xi2q,lat2tri_xi2k

# 2D triangular lattice

lat2triX:=proc(X::list,$)
local L;
L:=sort([X[1],X[2],-X[1]-X[2]]);
if (L[2]<0) then [-L[1],-L[2]] else [L[3],L[2]] end
end:


lat2triO:=proc(X0::list,{sorted::boolean:=false},$)
local X,L,v;
if (X0=[0,0]) then [X0] else
 X:=`if`(sorted,X0,lat2triX(X0));
 L:=map(v->v[..2],combinat[permute]([X[1],X[2],-X[1]-X[2]]));
 `if`(X[2]=0,L,[op(L),seq(-v,v=L)]) end
end:


lat2triONT:=proc(X0::list,{sorted::boolean:=false},$)
local X;
if (X0=[0,0]) then [1,1] else
 X:=`if`(sorted,X0,lat2triX(X0));
 `if`(X[2]=0,[6,2],`if`(X[1]=X[2],[6,3],[12,4])) end
end:


lat2triCD:=proc(X0::list,{sorted::boolean:=false},$)
local X;
X:=`if`(sorted,X0,lat2triX(X0));
X[1]+X[2]
end:


lat2triED2:=X->X[1]^2+X[1]*X[2]+X[2]^2:


lat2triadd:=proc(f::procedure(anything,anything),L::posint,$) local x,y; f(0,0)+6*add(f(x,0),x=1..L)+6*add(f(x,x),x=1..L)+12*add(add(f(x,y),y=1..x-1),x=2..L) end:


lat2trip:=proc(t,X::list,n::nonnegint,$)
local x,y,L,zs,z, i;
x,y:=op(lat2triX(X));
L:=[-x-n,`if`(x>2*n,op([-x+n,-n]),NULL),`if`(y>2*n,op([n,y-n]),NULL),y+n];
zs:=[seq($L[i]..L[i+1],i=1..nops(L),2)];
exp(-6*t)*add(BesselI(x+z,2*t)*BesselI(y-z,2*t)*BesselI(z,2*t),z=zs)
end:


lat2tri_q2xi:=q->sqrt(q/(8+q)):


lat2tri_xi2q:=xi->8*xi^2/(1-xi^2):


lat2tri_xi2k:=xi->sqrt(16*xi^3/((1-xi)^3*(1+3*xi))):


lat2trigo:=s->lat2triho(1/(1+s/8)):


lat2triho:=proc(q,$) local xi,k;  xi:=lat2tri_q2xi(q);  k:=lat2tri_xi2k(xi);  sqrt(xi)*k*EllipticK(k)/(2*Pi) end:


lat2trir:=proc(s,$) local xi,k;  xi:=1/sqrt(9-s);  k:=lat2tri_xi2k(-xi);  sqrt(xi)*piecewise(xi<1/3,0,xi<1,EllipticK(1/k),xi<infinity,k*EllipticK(k),0)/(2*Pi^2) end:


lat2trigP:=proc(s,X::list) lat2trihP(1/(1+s/8),X,_rest) end:


lat2trihP:=proc(q,X::list,N0::integer:=-1,output::string:=`if`(type(q,numeric),"","v"),digits::set(posint):={8},$)
local C,q1,N,n0,v,n,R,r,Nmin;
if type(q,numeric)
 then  C:=lat2triNc(max(N0,0),X,'all');  q1:=q;
 else  C:=lat2triN (max(N0,0),X,'all');  q1:=q/8   end;
N:=`if`(N0<0,Dim2(C),N0);
n0:=1+max(abs(X[1]),abs(X[2]),abs(X[1]+X[2]));
if type(q,numeric)
 then  v:=0;  for n from N by -1 to 0 do v:=C[n]+v*q end;  v:=v*q1^n0
 else  v:=add(C[n]*q1^(n+n0),n=0..N) end;
if (output="v") then return v end;
R:=lat2triPR(q,X,N+1);
if (output="c") then v+R elif (output="r") then [v+R,R] else
 if type(q,numeric) then
  r:=evalf(R/v);  if (r>10^(-digits[1])) then WARNING("Loss of precision: r=%1",r) end;
  Nmin:=round(4/3*lat2triED2(X)-lat2triCD(X));  if (N>10 and N<Nmin) then  WARNING("Increase N at least to %1",Nmin);  if (2*N<Nmin) then return v end end end;
 v+R end
end:


lat2triPR:=proc(q,X::list,N,shift:=0,$)
local x1,x2;
x1,x2:=lat2triCD(X),lat2triED2(X);
q^(N+1+x1)/(4*Pi*sqrt(3))*LerchPhi2(q,1,N+shift+1/3+x1+4/3*x2)
end:


lat2triN:=proc(n::nonnegint,X0::list(integer),{sorted::boolean:=false,all::boolean:=false},$)
local X,A,n1,x,x2,m,k,v;
X:=`if`(sorted,X0,lat2triX(X0));
if (assigned('lat2triNT[op(X)]') and Dim2(lat2triNT[op(X)])>=n) then `if`(all,lat2triNT[op(X)],lat2triNT[op(X)][n]) else
 A:=Array(0..n); #,datatype=integer
 if assigned('lat2triNT[op(X)]') then
  n1:=Dim2(lat2triNT[op(X)]);
  A[0..n1]:=lat2triNT[op(X)]
 else
  n1:=-1 end;
 x,x2:=X[1]+X[2],X[2];
 check_binom(2*n+x,100);
 for m from n1+1 to n do A[m]:=add(combinat[multinomial](m+x,k,k+x,m-2*k)*binomial(2*(m-k)+x,m-k+x2),k=0..iquo(m,2)) end; # tb_binom[2*(m-k)+x,m-k+x2]
 lat2triNT[op(X)]:=A;
 if not(assigned('lat2triNcT[op(X)]') and Dim2(lat2triNcT[op(X)])>=n) then lat2triNcT[op(X)]:=Array(0..n,k->evalf[Digits+10](A[k]/8^(k+1+x)),datatype=float) end;
 `if`(all,A,A[n]) end
end:


lat2triNc:=proc(n::nonnegint,X0::list(integer),{sorted::boolean:=false,all::boolean:=false},$)
local X;
X:=`if`(sorted,X0,lat2triX(X0));
if (assigned('lat2triNcT[op(X)]') and Dim2(lat2triNcT[op(X)])>=n) then `if`(all,lat2triNcT[op(X)],lat2triNcT[op(X)][n]) else
  lat2triN(n,X,':-sorted'=true);  lat2triNc(n,X,':-sorted'=true,':-all'=all) end
end:


lat2trigR:=proc(s,X::list(integer)) lat2trihR(1/(1+s/8),X,_rest) end:


lat2trihR:=proc(q,X::list(integer),output::string:=`if`(type(q,numeric),"v","l"),$)
local M,L,B,i,n;
M:=lat2triM(X);
L:=[seq(add(M[i,n]*(8/q)^(n-1),n=1..Dim2(M)[2]),i=1..3)];
if (output="l") then L else  B:=lat2triB(q);  add(L[i]*B[i],i=1..3) end
end:


lat2triB:=proc(q)
local xi,k,K,E,h0,h1,h2;
if (_nrest=2) then K,E:=_rest else
 xi:=lat2tri_q2xi(q);
 k:=lat2tri_xi2k(xi);
 K:=sqrt(xi)*k*EllipticK(k)/(2*Pi);
 E:=EllipticE(k)/(sqrt(xi)*k*Pi) end;
h0:=K;
h1:=(4/q-1)/3*h0-1/6;
h2:=(8/q^2-20/(3*q)-1/3)*h0+1/3-E;
[h0,h1,h2]
end:


lat2triM:=proc(X0::list(integer),{sorted::boolean:=false},$)
local X,x,y,M,M2,n,j,k,v;
X:=`if`(sorted,X0,lat2triX(X0));
x,y:=op(X);
if assigned('lat2triMT[x,y]') then lat2triMT[x,y] else
 if (x<=1) then  M:=Matrix(3,1);  M[1+x+y,1]:=1 else
  M:=Matrix(3,x+max(y-1,0));
  x:=x-1;
  M2:=LinearAlgebra[MatrixScalarMultiply](lat2triM([x,y]),x);
  n:=Dim2(M2)[2];
  M[..,2..1+n]:=M2;
  for j from 1 to 3 do for k from 1 to n do M[j,k]:=M[j,k]-2*M2[j,k] end end;
  for v in [[[x-1,y],y-x],[[x,y-1],-2*x],[[x+1,y-1],-2*x-y],[[x-1,y+1],y]] do
   M2:=LinearAlgebra[MatrixScalarMultiply](lat2triM(v[1]),v[2]);
   for j from 1 to 3 do for k from 1 to Dim2(M2)[2] do M[j,k]:=M[j,k]+M2[j,k] end end end;
  LinearAlgebra[MatrixScalarMultiply](M,1/(x+y),'inplace') end;
 lat2triMT[op(X)]:=M;
 M end
end:



################################################################################
# Auxiliary functions and variables

latDscNT:=table():
latDscNcT:=table():
latDscMT:=table():
latDscST:=table():  # d=BA[i,n,k]::Array(0..d,0..d,0..N) where  i - ODE basis, n - recurrence basis, k - p^(2*k)
latDscSCT:=table(): # d=list(d)  add(C[i]*BA[i],i=1..d)+C[d]*BA[0]*Z

lat2triNT:=table():
lat2triNcT:=table():
lat2triMT:=table(): # (x,y)=Matrix(3,n,rational)

tb_binom:=Array(0..0,0..0,1,datatype=integer):

check_binom:=proc(N::nonnegint,dN::nonnegint:=0,$)
local N1,N2,A,n,k;
N1:=Dim2(tb_binom)[1];
if (N>N1) then
 N2:=N+dN;
 A:=copy(tb_binom);
 tb_binom:=Array(0..N2,0..N2,1,datatype=integer);
 tb_binom[0..N1,0..N1]:=A;
 for n from N1+1 to N2 do for k from 1 to n-1 do tb_binom[n,k]:=tb_binom[n-1,k]+tb_binom[n-1,k-1] end end;
 N2
else N1 end
end:

AJ4:=[0.309866780462120428169674416214750177538322267290439,
     -0.103825397195273302515146683443075515078940615274711,
      0.0178180138599791569202095513776168246898750588143251]: #[Joyce03]
AJ5:=[0.231261624968046235741427024387713397109085469701028,
     -0.0773976576152940464533831405283196296308355492812747,
      0.00959700755773849730065905763800918995361021720304974,
     -0.00124070433372942912213155150795104346543474067393562]:


########################################################################

ModuleLoad()

end module:
